pipeline {
    agent any

    stages {
        stage('Dump Database Schema') {
            steps {
                script {
                    // Bind all sensitive PostgreSQL values from Jenkins credentials into local shell variables.
                    withCredentials([
                        string(credentialsId: 'postgres_host', variable: 'MY_POSTGRES_HOST'),
                        string(credentialsId: 'postgres_port', variable: 'MY_POSTGRES_PORT'),
                        string(credentialsId: 'postgres_db', variable: 'MY_POSTGRES_DB'),
                        string(credentialsId: 'postgres_user', variable: 'MY_POSTGRES_USER'),
                        string(credentialsId: 'postgres_password', variable: 'MY_POSTGRES_PASSWORD')
                    ]) {
                        // Use triple single-quoted string so that the shell does variable interpolation
                        sh '''
                            echo "Dumping schema from PostgreSQL database at $MY_POSTGRES_HOST:$MY_POSTGRES_PORT..."
                            PGPASSWORD=$MY_POSTGRES_PASSWORD pg_dump --host=$MY_POSTGRES_HOST --port=$MY_POSTGRES_PORT --username=$MY_POSTGRES_USER --schema-only --no-owner $MY_POSTGRES_DB > schema.sql
                        '''
                    }
                }
            }
        }

        stage('Prepare Dockerfile') {
            steps {
                script {
                    // Create the Dockerfile that copies the schema dump.
                    writeFile file: 'Dockerfile', text: '''
                        FROM postgres:latest
                        COPY schema.sql /docker-entrypoint-initdb.d/schema.sql
                    '''.stripIndent()
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Define image name and tag (non-sensitive values)
                    def dockerImage = 'otecpms/postgres-schema'
                    def dockerTag = 'latest'
                    def fullDockerImage = "${dockerImage}:${dockerTag}"
                    
                    // Build the Docker image
                    docker.build(fullDockerImage, '.')
                    
                    // Store the full image name in the current script scope
                    env.FULL_DOCKER_IMAGE = fullDockerImage
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub-credentials') {
                        // Push the 'latest' tagged image
                        docker.image(env.FULL_DOCKER_IMAGE).push('latest')
                        
                        // Generate a unique tag based on BUILD_NUMBER and current date
                        def currentDate = new Date().format("yyyyMMdd")
                        def uniqueTag = "${env.BUILD_NUMBER}-${currentDate}"
                        def uniqueImage = "otecpms/postgres-schema:${uniqueTag}"
                        
                        echo "Tagging image with unique tag: ${uniqueTag}"
                        
                        // Tag the built image with the unique tag
                        sh "docker tag ${env.FULL_DOCKER_IMAGE} ${uniqueImage}"
                        
                        // Push the image with the unique tag
                        docker.image(uniqueImage).push()
                        
                        echo "Successfully pushed images with tags: ${uniqueTag} and latest"
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Schema Docker image created and published successfully!"
        }
        failure {
            echo "Failed to create and publish schema Docker image."
        }
    }
}
