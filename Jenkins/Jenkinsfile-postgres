
pipeline {
    agent any

    environment {
        POSTGRES_HOST = 'localhost'
        POSTGRES_PORT = '1040'
        POSTGRES_USER = 'admin'
        POSTGRES_PASSWORD = 'admin' // Use credentials if required
        POSTGRES_DB = 'otec_pms'
        SCHEMA_DUMP_FILE = 'schema.sql'
        DOCKER_IMAGE = 'otecpms/postgres-schema'
        DOCKER_TAG = 'latest'
        FULL_DOCKER_IMAGE = "${DOCKER_IMAGE}:${DOCKER_TAG}"
        REGISTRY_CREDENTIALS = 'dockerhub-credentials' // Jenkins credential ID for Docker registry
    }

    stages {
        stage('Dump Database Schema') {
            steps {
                script {
                    sh """
                    echo "Dumping schema from PostgreSQL database at ${POSTGRES_HOST}:${POSTGRES_PORT}..."
                    PGPASSWORD=${POSTGRES_PASSWORD} pg_dump --host=${POSTGRES_HOST} --port=${POSTGRES_PORT} --username=${POSTGRES_USER} --schema-only --no-owner ${POSTGRES_DB} > ${SCHEMA_DUMP_FILE}
                    """
                }
            }
        }

        stage('Prepare Dockerfile') {
            steps {
                script {
                    writeFile file: 'Dockerfile', text: '''
                    FROM postgres:latest
                    COPY schema.sql /docker-entrypoint-initdb.d/schema.sql
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${FULL_DOCKER_IMAGE}", '.')
                }
            }
        }

       stage('Push Docker Image') {
    steps {
        script {
            docker.withRegistry('https://registry.hub.docker.com', REGISTRY_CREDENTIALS) {
                // Push the image tagged as 'latest'
                docker.image("${FULL_DOCKER_IMAGE}").push()
                
                // Generate a unique tag based on BUILD_NUMBER and current date
                def currentDate = new Date().format("yyyyMMdd")
                def uniqueTag = "${env.BUILD_NUMBER}-${currentDate}"
                def uniqueImage = "${DOCKER_IMAGE}:${uniqueTag}"
                
                echo "Tagging image with unique tag: ${uniqueTag}"
                
                // Tag the existing image with the unique tag
                sh "docker tag ${FULL_DOCKER_IMAGE} ${uniqueImage}"
                
                // Push the image tagged with the unique tag
                docker.image("${uniqueImage}").push()
                
                echo "Successfully pushed images with tags: ${uniqueTag} and latest"
            }
        }
    }
}

    }

    post {
        success {
            echo "Schema Docker image created and published successfully!"
        }
        failure {
            echo "Failed to create and publish schema Docker image."
        }
    }
}
