pipeline {
    agent any

    environment {
        // Retrieve these values from Jenkins Secret Text credentials
        POSTGRES_HOST    =credentials('postgres_host') 
        POSTGRES_PORT    = credentials('postgres_port')
        POSTGRES_DB      = credentials('postgres_db')
        SCHEMA_DUMP_FILE = 'schema.sql'
        DOCKER_IMAGE     = 'otecpms/postgres-schema'
        POSTGRES_USER    = credentials('postgres_user')
        POSTGRES_PASSWORD= credentials('postgres_password')
        
        // Constant and computed values
        DOCKER_TAG        = 'latest'
        FULL_DOCKER_IMAGE = "${DOCKER_IMAGE}:${DOCKER_TAG}"
        REGISTRY_CREDENTIALS = 'dockerhub-credentials'  // Docker registry credential ID stored in Jenkins
    }

    stages {
stage('Debug Environment Variables') {
    steps {
        script {
            sh """
            echo "POSTGRES_PORT: ${POSTGRES_PORT}"
            """
        }
    }
}

        stage('Dump Database Schema') {
            steps {
                script {
                    withEnv([
                        "PGHOST=${POSTGRES_HOST}",
                        "PGPORT=${POSTGRES_PORT}",
                        "PGDATABASE=${POSTGRES_DB}",
                        "PGUSER=${POSTGRES_USER}",
                        "PGPASSWORD=${POSTGRES_PASSWORD}"
                    ]) {
                        sh """
                        echo "Dumping schema from PostgreSQL database..."
                        pg_dump --schema-only --no-owner > ${SCHEMA_DUMP_FILE}
                        """
                    }
                }
            }
        }

        stage('Prepare Dockerfile') {
            steps {
                script {
                    writeFile file: 'Dockerfile', text: '''
                    FROM postgres:latest
                    COPY schema.sql /docker-entrypoint-initdb.d/schema.sql
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${FULL_DOCKER_IMAGE}", '.')
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', REGISTRY_CREDENTIALS) {
                        docker.image("${FULL_DOCKER_IMAGE}").push('latest')
                        
                        def currentDate = new Date().format("yyyyMMdd")
                        def uniqueTag = "${env.BUILD_NUMBER}-${currentDate}"
                        def uniqueImage = "${DOCKER_IMAGE}:${uniqueTag}"
                        
                        echo "Tagging image with unique tag: ${uniqueTag}"
                        sh "docker tag ${FULL_DOCKER_IMAGE} ${uniqueImage}"
                        docker.image(uniqueImage).push()
                        
                        echo "Successfully pushed images with tags: ${uniqueTag} and latest"
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Schema Docker image created and published successfully!"
        }
        failure {
            echo "Failed to create and publish schema Docker image."
        }
    }
}
