pipeline {
    agent any

    parameters {
        string(
            name: 'DEV_DOCKER_IMAGE',
            defaultValue: 'otecpms/react-app-devx:latest',
            description: 'Docker image built in Dev environment (must have source + Node.js installed)'
        )
    }

    environment {
        // Node related settings
        NODE_VERSION       = '16.20.2'
        NODE_OPTIONS       = '--max-old-space-size=4096'
        
        // Docker image settings
        DOCKER_IMAGE       = 'otecpms/react-app-devx'
        DOCKER_TAG         = 'latest'
        FULL_DOCKER_IMAGE  = "${DOCKER_IMAGE}:${DOCKER_TAG}"
        REGISTRY_URL       = 'https://registry.hub.docker.com'
        REGISTRY_CREDENTIALS = 'dockerhub-credentials'
        
        // Environment & SSL certificate file paths on the Jenkins machine
        ENV_FILE_PATH      = '/home/testthree/pms_files/dev-frontend.env'
        SSL_CERTIFICATE    = '/home/testthree/certs/fullchain.pem'
        SSL_CERTIFICATE_KEY = '/home/testthree/certs/privkey.pem'
        
        // Ports for running the container
        PORT_EXT       = '1212'
        PORT_INT       = '80'
        
        // Container name
        CONTAINER_NAME     = 'react-app-dev'
    }

    options {
        retry(3)  // Retry any failing stages up to 3 times
    }

    stages {
        /*
        // Optional cleanup/pull stages can be uncommented if needed.
        */
        
        stage('SSL') {
            steps {
                script {
                    // Create a local directory for SSL certificates (in the workspace) so we avoid permission issues
                    sh """
                        echo "Preparing to copy SSL certificate files..."
                        mkdir -p certs_copy
                        cp ${SSL_CERTIFICATE} certs_copy/fullchain.pem
                        cp ${SSL_CERTIFICATE_KEY} certs_copy/private.pem
                        echo "SSL certificate files copied successfully to certs_copy."
                    """
                }
            }
        }

        stage('Copying environment file') {
            steps {
                script {
                    sh """
                        echo "Copying environment file..."
                        cp ${ENV_FILE_PATH} .env
                        echo "Environment file copied successfully."
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image using the specified Dockerfile
                    docker.build("${FULL_DOCKER_IMAGE}", "-f Dockerfile .")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry("${REGISTRY_URL}", "${REGISTRY_CREDENTIALS}") {
                        docker.image("${FULL_DOCKER_IMAGE}").push()
                        docker.image("${FULL_DOCKER_IMAGE}").push('latest')
                    }
                }
            }
        }

        stage('Deploy to Server') {
            steps {
                script {
                    sh """
                        echo "Deploying React application with Docker..."
                        
                        # Pull the latest Docker image
                        docker pull ${DOCKER_IMAGE}:latest

                        # Stop and remove any container with the same name
                        if [ \$(docker ps -a -q -f name=${CONTAINER_NAME}) ]; then
                            echo "Container ${CONTAINER_NAME} found. Stopping and removing..."
                            docker stop ${CONTAINER_NAME} || true
                            docker rm ${CONTAINER_NAME} || true
                        fi

                        # Run the new container
                        echo "Starting new container..."
                        docker run -d --name ${CONTAINER_NAME} \\
                                   -p ${PORT_EXT}:${PORT_INT} \\
                                   ${DOCKER_IMAGE}:latest

                        echo "Deployment completed. React app is now served on port ${PORT_EXT}."
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Build and deployment succeeded!"
        }
        failure {
            echo "Build or deployment failed."
        }
    }
}
