pipeline {
    agent any

    environment {
        NODE_VERSION         = '16.20.2'
        NODE_OPTIONS         = '--max-old-space-size=4096'
        
        DOCKER_IMAGE         = 'otecpms/react-app-devx'
        DOCKER_TAG           = 'latest'
        FULL_DOCKER_IMAGE    = "${DOCKER_IMAGE}:${DOCKER_TAG}"
        REGISTRY_CREDENTIALS = 'dockerhub-credentials'
        
        ENV_FILE_PATH        = '/var/jenkins_home/pms_files/dev-frontend.env'
        SSL_CERTIFICATE      = '/home/certs/fullchain.pem'
        SSL_CERTIFICATE_KEY  = '/home/certs/privkey.pem'

        PORT_EXT             = '8084'
        PORT_INT             = '80'
        CONTAINER_NAME       = 'react-app-devx'

        DOCKER_BUILDKIT      = '1'
    }

    options {
        retry(2) // Retry twice for quicker failover
    }

    stages {
        stage('Prepare Files') {
            steps {
                sh """
                    echo "Copying environment file..."
                    cp ${ENV_FILE_PATH} .env
                    echo "Environment file copied."

                    # SSL prep (uncomment if container needs certs copied)
                    # mkdir -p certs_ssl
                    # cp ${SSL_CERTIFICATE} certs_ssl/fullchain.pem
                    # cp ${SSL_CERTIFICATE_KEY} certs_ssl/privkey.pem
                """
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                script {
                    // Initialize Buildx if needed
                    sh 'docker buildx create --use || true'

                    docker.withRegistry('', REGISTRY_CREDENTIALS) {
                        sh """
                            echo "Building and pushing ${FULL_DOCKER_IMAGE}..."
                            docker buildx build \
                                --platform linux/amd64 \
                                --tag ${FULL_DOCKER_IMAGE} \
                                --push \
                                .
                        """
                    }
                }
            }
        }

        stage('Deploy Container') {
            steps {
                sh """
                    echo "Pulling ${FULL_DOCKER_IMAGE}..."
                    docker pull ${FULL_DOCKER_IMAGE}

                    echo "Stopping old container (if exists)..."
                    docker rm -f ${CONTAINER_NAME} 2>/dev/null || true

                    echo "Starting new container..."
                    docker run -d --name ${CONTAINER_NAME} \
                        -p ${PORT_EXT}:${PORT_INT} \
                        ${FULL_DOCKER_IMAGE}

                    echo "Deployment completed."
                """
            }
        }
    }

    post {
        success {
            echo "✅ Build and deployment succeeded for ${FULL_DOCKER_IMAGE}"
        }
        failure {
            echo "❌ Build or deployment failed"
        }
    }
}
